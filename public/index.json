[{"authors":null,"categories":null,"content":"Brooke Anderson is an assistant professor of environmental epidemiology at Colorado State University. Her research focuses on the health risks associated with climate-related exposures, including heat waves and air pollution, for which she has conducted several national-level studies. As part of her research, she has also published a number of open source R software packages to facilitate environmental epidemiologic research.\n","date":1581552000,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1581612248,"objectID":"9eeff3b66d9db9aba8ad7e1cd7ebf977","permalink":"/authors/brooke-anderson/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/brooke-anderson/","section":"authors","summary":"Brooke Anderson is an assistant professor of environmental epidemiology at Colorado State University. Her research focuses on the health risks associated with climate-related exposures, including heat waves and air pollution, for which she has conducted several national-level studies. As part of her research, she has also published a number of open source R software packages to facilitate environmental epidemiologic research.","tags":null,"title":"Brooke Anderson","type":"authors"},{"authors":null,"categories":null,"content":"Bailey Fosdick is an assistant professor of statistics at Colorado State University. Her primary research interests lie in the development of statistical methods for analyzing network data, with particular attention to applications in ecology and the social sciences. She also studies covariance models for multiway data, Bayesian statistics, and methods for survey analysis.\n","date":1581206400,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1581281287,"objectID":"a99ca1d34add3871e4b8e2225c007a06","permalink":"/authors/bailey-fosdick/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/bailey-fosdick/","section":"authors","summary":"Bailey Fosdick is an assistant professor of statistics at Colorado State University. Her primary research interests lie in the development of statistical methods for analyzing network data, with particular attention to applications in ecology and the social sciences. She also studies covariance models for multiway data, Bayesian statistics, and methods for survey analysis.","tags":null,"title":"Bailey Fosdick","type":"authors"},{"authors":null,"categories":null,"content":"Amy Fox is a graduate student in the Department of Microbiology, Immunology, and Pathology at Colorado State University. She's currently testing the efficacy of different tuberculosis vaccines in mice and working on developing an R-based data analysis pipeline for flow cytometry data. When she's not in the lab, she enjoys traveling and experiencing new food and cultures.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"7208808b98af56edaf6697e234c3877b","permalink":"/authors/amy-fox/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/amy-fox/","section":"authors","summary":"Amy Fox is a graduate student in the Department of Microbiology, Immunology, and Pathology at Colorado State University. She's currently testing the efficacy of different tuberculosis vaccines in mice and working on developing an R-based data analysis pipeline for flow cytometry data. When she's not in the lab, she enjoys traveling and experiencing new food and cultures.","tags":null,"title":"Amy Fox","type":"authors"},{"authors":null,"categories":null,"content":"Burton Karger is a Research Associate in the Department of Microbiology Immunology and Pathology at Colorado State University.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"7979d3030119d29653a50463c423f481","permalink":"/authors/burton-karger/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/burton-karger/","section":"authors","summary":"Burton Karger is a Research Associate in the Department of Microbiology Immunology and Pathology at Colorado State University.","tags":null,"title":"Burton Karger","type":"authors"},{"authors":null,"categories":null,"content":"Camron Pearce is a graduate student in the Department of Microbiology at Colorado State University. His research includes researching drug therapies against tuberculosis and determining particle localization using confocal microscopy. His personal life includes marathon training, skiing on the weekend, and finding the next best fishing hole.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"d7248a08ab17e3d5c2bea65700d68a9b","permalink":"/authors/camron-pearce/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/camron-pearce/","section":"authors","summary":"Camron Pearce is a graduate student in the Department of Microbiology at Colorado State University. His research includes researching drug therapies against tuberculosis and determining particle localization using confocal microscopy. His personal life includes marathon training, skiing on the weekend, and finding the next best fishing hole.","tags":null,"title":"Camron Pearce","type":"authors"},{"authors":null,"categories":null,"content":"Daniel Dean is a graduate student in the Department of Agriculture and Biology at Colorado State University. He is studying the soil microbiome and interested in learning more with R programming (etc.)\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"05bf39477bf7e4b59f2e5aed40d43fa8","permalink":"/authors/daniel-dean/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/daniel-dean/","section":"authors","summary":"Daniel Dean is a graduate student in the Department of Agriculture and Biology at Colorado State University. He is studying the soil microbiome and interested in learning more with R programming (etc.)","tags":null,"title":"Daniel Dean","type":"authors"},{"authors":null,"categories":null,"content":"James DiLisio is a graduate student in the Department of Microbiology, Immunology, and Pathology at Colorado State University. He is interested in modulating immune cell phentoypes in various disease states to improve current therapies.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"84c043c7c8c0042274f75edaccfe9957","permalink":"/authors/james_dilisio/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/james_dilisio/","section":"authors","summary":"James DiLisio is a graduate student in the Department of Microbiology, Immunology, and Pathology at Colorado State University. He is interested in modulating immune cell phentoypes in various disease states to improve current therapies.","tags":null,"title":"James DiLisio","type":"authors"},{"authors":null,"categories":null,"content":"Mikaela Elder is a undergraudate student in the Department of Biochemistry and Molecular Biology at Colorado State University. She has worked in a genetics lab on a project investigating the effects of mutation in proteins linked to neurodegenerative diseases and a project investigating the atypical structural tendencies among low-complexity domains in the Protein Data Bank proteome. Her goals are to learn how to mathematically model biological systems in an effort to better understand the mechanisms of biochemical processes.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2c23a0a0af5e97a1815648da4252c925","permalink":"/authors/mikaela-elder/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/mikaela-elder/","section":"authors","summary":"Mikaela Elder is a undergraudate student in the Department of Biochemistry and Molecular Biology at Colorado State University. She has worked in a genetics lab on a project investigating the effects of mutation in proteins linked to neurodegenerative diseases and a project investigating the atypical structural tendencies among low-complexity domains in the Protein Data Bank proteome. Her goals are to learn how to mathematically model biological systems in an effort to better understand the mechanisms of biochemical processes.","tags":null,"title":"Mikaela Elder","type":"authors"},{"authors":null,"categories":null,"content":"Mike Lyons is an assistant professor at Colorado State University. He works on the development and application of mathematical and computational tools for tuberculosis clinical trials. This work involves both conventional pharmacokinetic/pharmacodynamic modeling and simulation as well as physiological modeling and the use of engineering-based approaches to design optimized combination drug regimens.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2f8f117d42fb07fcd0da9af3c5821003","permalink":"/authors/mike-lyons/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/mike-lyons/","section":"authors","summary":"Mike Lyons is an assistant professor at Colorado State University. He works on the development and application of mathematical and computational tools for tuberculosis clinical trials. This work involves both conventional pharmacokinetic/pharmacodynamic modeling and simulation as well as physiological modeling and the use of engineering-based approaches to design optimized combination drug regimens.","tags":null,"title":"Mike Lyons","type":"authors"},{"authors":null,"categories":null,"content":"Sarah Cooper is a graduate student in the Department of Microbiology, Immunology, Pathology at Colorado State University.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"a2f4c4d8a79a270a1ff69d28937404db","permalink":"/authors/sarah-cooper/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/sarah-cooper/","section":"authors","summary":"Sarah Cooper is a graduate student in the Department of Microbiology, Immunology, Pathology at Colorado State University.","tags":null,"title":"Sarah Cooper","type":"authors"},{"authors":null,"categories":null,"content":"Sere Williams is a graduate student in the Department of Cellular and Molecular Biology at Colorado State University. She recently completed her MSc studying gene expression in rice exposed to drought stress. She's excited to begin her PhD. This year she is rotating through labs working on immune response in tobacco, modeling hormone interactions in Arabidopsis, frost tolerance in weeds, and electron transport in Archaea.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"359ce304229cff7b3cd9e06860d9e8f8","permalink":"/authors/sere-williams/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/sere-williams/","section":"authors","summary":"Sere Williams is a graduate student in the Department of Cellular and Molecular Biology at Colorado State University. She recently completed her MSc studying gene expression in rice exposed to drought stress. She's excited to begin her PhD. This year she is rotating through labs working on immune response in tobacco, modeling hormone interactions in Arabidopsis, frost tolerance in weeds, and electron transport in Archaea.","tags":null,"title":"Sere Williams","type":"authors"},{"authors":null,"categories":null,"content":"Sherry WeMott-Colton is a graduate student in the Department of Environmental and Radiological Health Sciences at Colorado State University. Her research focuses on evironmental and social factors impacting health.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"93e55912b52bf4b4c2aca0826be7d218","permalink":"/authors/sherry-wemott/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/sherry-wemott/","section":"authors","summary":"Sherry WeMott-Colton is a graduate student in the Department of Environmental and Radiological Health Sciences at Colorado State University. Her research focuses on evironmental and social factors impacting health.","tags":null,"title":"Sherry WeMott","type":"authors"},{"authors":null,"categories":null,"content":"Sierra Pugh is a graduate student in the Department of Statistics at Colorado State University. She has interest in Bayesian statistics, and has experience in spatial statistics.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"a0b6f7b6e4c0c6781dd1b5bb9f45c4be","permalink":"/authors/sierra-pugh/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/sierra-pugh/","section":"authors","summary":"Sierra Pugh is a graduate student in the Department of Statistics at Colorado State University. She has interest in Bayesian statistics, and has experience in spatial statistics.","tags":null,"title":"Sierra Pugh","type":"authors"},{"authors":null,"categories":null,"content":"Zach Laubach's research is grounded in behavioral ecology and evolutionary biology. In particular, he tries to understand the ways in which early life environments shape phenotype. He is drawn to questions that explore the interrelations among social behaviors, molecular mechanisms, and stress physiology. He uses tools from diverse fields, including molecular biology and physiology to identify proximate mechanisms of animal behaviors and phenotypes; and causal inference methods from epidemiology to better understand relationships gleaned from observational data. He has carried out his research in birds, hyenas, and humans.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"995dbc8c49ceaac8348f9682a5aeed3c","permalink":"/authors/zach_laubach/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/zach_laubach/","section":"authors","summary":"Zach Laubach's research is grounded in behavioral ecology and evolutionary biology. In particular, he tries to understand the ways in which early life environments shape phenotype. He is drawn to questions that explore the interrelations among social behaviors, molecular mechanisms, and stress physiology. He uses tools from diverse fields, including molecular biology and physiology to identify proximate mechanisms of animal behaviors and phenotypes; and causal inference methods from epidemiology to better understand relationships gleaned from observational data.","tags":null,"title":"Zach Laubach","type":"authors"},{"authors":["Brooke Anderson"],"categories":["quiz","Chapter 2"],"content":" The vocabulary quiz will be live here during the start of the course.\nLoading…  ","date":1581552000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581612248,"objectID":"7c8103a2670fda3b5cb4a7557b69a29c","permalink":"/post/chapter-2-vocabulary-quiz/","publishdate":"2020-02-13T00:00:00Z","relpermalink":"/post/chapter-2-vocabulary-quiz/","section":"post","summary":" The vocabulary quiz will be live here during the start of the course.\nLoading…  ","tags":["quiz","Chapter 2"],"title":"Chapter 2 Part 1 vocabulary quiz","type":"post"},{"authors":["Brooke Anderson"],"categories":["instructions","blogdown","exercises","github"],"content":" Each of you will be responsible once or twice over the semester to create a blog post that provides a clean, clearly-presented solution to the in-class exercise for the week. This blog post provides the technical instructions for writing and submitting that exercise.\nYour exercise solution should be posted before the next class meeting. Since it will need to be reviewed by the faculty before it can be officially posted, please plan to submit it by the Tuesday after the class for your exercise. Student assignments for the exercises are given in the Schedule section of our course website.\nOverview of creating a post You will be submitting your exercise solution as a blog post. Creating one for our website will follow all the same steps as creating a blog post for a vocabulary list, just with different content. Please read the post on creating a vocabulary list and follow the steps there to:\n Update your fork of the website Make a new blog post Use RMarkdown syntax to write the blog post Submit the blog post   Content for the blog post The blog post should provide a walk-through of the solution to that week’s in-course exercise. We have posted an example for the exercise for Chapter 1 to give you an idea of what you should aim to write.\nGenerally, this exercise will be a resource for everyone in the class, to make sure they’ve understood the exercise, as well as to see how someone else tackled the problem. Your solution should cover all parts of the exercise (for example, if there’s a part A and B, you should cover both). You can start by writing it as you would if you were assigned the exercise as a homework problem, but then you should do a second step of revision to provide some context and dig a bit deeper into how you tackled the question. Since we are only requiring you to write up exercise answers once or twice over the semester (rather than submitting homework for exercises every week), we expect this product to be more in-depth and polished than a typical homework solution.\nFirst, make sure that you have provided text explaining what the exercise asks for, in case the reader hasn’t recently read the exercise prompt. Second, please add a few details either about how you tackled the problem through code or how the statistical principles covered in the exercise could apply to other problems you’ve come across in your research or coursework.\nTo help in preparing your post, plan to spend the exercise time in class during the week of your exercise visiting the different groups of students working on the exercise. You can talk to them about how they’re approaching the problem, how they interpret it, etc., to help you develop your own answer.\n Tips  Be sure to refresh yourself on all the Markdown formatting tags you can use to improve the appearance of your post. Be sure to include things like section headings and italics or bold as appropriate. RStudio’s website has some nice cheatsheets on RMarkdown that can help. Make sure you include R code if appropriate. If you put parentheses around an assignment expression in R, it will print out the assigned object and make the assignment in the same call—you might find this useful in writing concise code while still showing what’s in the objects you create. Use the $ and $$ tags in RMarkdown to include mathematical equations in your blog post when appropriate. If you need to read in a dataset for R code in your blog post, talk with us about how we can do that within a blogdown framework. If your data comes from an online source or from an R library, this shouldn’t be a problem, but if it is from a data file that needs to be included in the website directory, we may need to work with you on some extra set-up. You are welcome to draw from (and cite) other statistics textbooks or dictionaries if you’d like to in explaining the problem and your approach to it. For the code, look at vignettes and helpfiles, especially for packages you are not familiar with. For a lot of Bioconductor packages, object-oriented programming is used pretty heavily. This means that associated data in R packages will often be stored in a format that you haven’t used yet. Look up more information on data classes used in your exercise if you aren’t familiar with them. You can use the class function to determine the class of an object as well as the name of the package that defines that class. The str function is often helpful for exploring a data object class, as well. Many of the Bioconductor object classes will have special accessor methods, which are functions that allow you to extract certain elements from the object—check the helpfile for the object class, as these methods are often listed there with examples. Googling can also be very helpful for learning more about functions, packages, and datasets in R, especially if you don’t yet know what package the item is from. Most Bioconductor packages have very nice vignettes available online and from your R session once you have installed the package. These are a great place to start to find out more about how to use the functions and object classes that come with the package.   ","date":1581552000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581477683,"objectID":"459571b5f2972f118129cd8d9a5201a1","permalink":"/post/how-to-create-an-exercise-solution-blog-post/","publishdate":"2020-02-13T00:00:00Z","relpermalink":"/post/how-to-create-an-exercise-solution-blog-post/","section":"post","summary":"Each of you will be responsible once or twice over the semester to create a blog post that provides a clean, clearly-presented solution to the in-class exercise for the week. This blog post provides the technical instructions for writing and submitting that exercise.\nYour exercise solution should be posted before the next class meeting. Since it will need to be reviewed by the faculty before it can be officially posted, please plan to submit it by the Tuesday after the class for your exercise.","tags":["instructions","blogdown","exercises","github"],"title":"How to create an exercise solution blog post","type":"post"},{"authors":["Brooke Anderson"],"categories":["exercises","Chapter 1"],"content":" This exercise asks us to explore the frequency of each of the four nucleotides (A, C, G, and T) in the genome of C. elegans, a type of worm used frequently in scientific research.\nThis solution requires that several R extension packages be loaded in your R session. If you do not have these packages installed to your computer yet, you should follow instructions we’ve posted separately describing the required set-up for this exercise. Once you have installed these packages on your computer, you can load them into your current R session using the library function:\nlibrary(\u0026quot;BSgenome.Celegans.UCSC.ce2\u0026quot;) library(\u0026quot;Biostrings\u0026quot;) library(\u0026quot;tidyverse\u0026quot;) library(\u0026quot;knitr\u0026quot;) Part A Part A of the question asks us to explore the nucleotide frequency of the C. elegans genome. This genome is available in the Celegans data that comes with the BSgenome.Clegans.UCSC.ce2 package and is stored within a BSgenome class, which is a special object class provided by the Biostrings package.\nThere is a dedicated function called letterFrequency in the Biostrings package that can be used to count the frequency of letters in a string (like a genome) in an R object like this. In a call to this function, you must also include the possible letters in your “alphabet”—that is, the possible letters that each position in your string could take.\n(nuc_freq \u0026lt;- letterFrequency(Celegans$chrM, letters=c(\u0026quot;A\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;G\u0026quot;, \u0026quot;T\u0026quot;))) ## A C G T ## 4335 1225 2055 6179 To explore and plot this data, I put this summary data into a tibble, so I could more easily use tidyverse tools with the data.\nnuc_freq_df \u0026lt;- tibble(nucleotide = names(nuc_freq), n = nuc_freq) nuc_freq_df ## # A tibble: 4 x 2 ## nucleotide n ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; ## 1 A 4335 ## 2 C 1225 ## 3 G 2055 ## 4 T 6179 In this format, you can use tidyverse tools to explore the data a bit more. For example, you can determine the total number of nucleotides in the genome and, with that calculate the proportion of each nucleotide across the genome. Along with the kable function from the knitr package, I created a formatted table with this information:\nnuc_freq_df %\u0026gt;% mutate(prop = n / sum(n)) %\u0026gt;% kable(digits = 2, caption = \u0026quot;Nucleotide frequencies and proportions in *C. elegans*\u0026quot;, col.names = c(\u0026quot;Nucleotide\u0026quot;, \u0026quot;Frequency\u0026quot;, \u0026quot;Proportion\u0026quot;))  Table 1: Nucleotide frequencies and proportions in C. elegans  Nucleotide Frequency Proportion    A 4335 0.31  C 1225 0.09  G 2055 0.15  T 6179 0.45    For some presentations, it might be clearer to present this information in a slightly different table format, using pivot_longer and then pivot_wider to reformat the table for presentation:\nnuc_freq_df %\u0026gt;% mutate(prop = n / sum(n), n = prettyNum(n, big.mark = \u0026quot;,\u0026quot;), prop = prettyNum(prop, digits = 2)) %\u0026gt;% pivot_longer(cols = c(\u0026quot;n\u0026quot;, \u0026quot;prop\u0026quot;)) %\u0026gt;% pivot_wider(names_from = \u0026quot;nucleotide\u0026quot;) %\u0026gt;% mutate(name = case_when( name == \u0026quot;n\u0026quot; ~ \u0026quot;Frequency of nucleotide\u0026quot;, name == \u0026quot;prop\u0026quot; ~ \u0026quot;Proportion of all nucleotides\u0026quot; )) %\u0026gt;% rename(` ` = name) %\u0026gt;% kable(align = c(\u0026quot;rcccc\u0026quot;), caption = \u0026quot;Nucleotide frequencies and proportions in *C. elegans*\u0026quot;)  Table 2: Nucleotide frequencies and proportions in C. elegans   A C G T    Frequency of nucleotide 4,335 1,225 2,055 6,179  Proportion of all nucleotides 0.31 0.089 0.15 0.45    Here is a plot of the frequency of each of the four nucleotides for the C. elegans nucleotide:\nggplot(nuc_freq_df, aes(x = nucleotide, y = n)) + geom_col(fill = \u0026quot;lavender\u0026quot;, color = \u0026quot;black\u0026quot;) + theme_classic() + scale_y_continuous(label = scales::comma) + theme(axis.title = element_blank()) + labs(title = expression(paste(italic(\u0026quot;C. elegans\u0026quot;), \u0026quot; neucleotide frequency\u0026quot;)), caption = expression(paste(\u0026quot;Based on data from the \u0026quot;, italic(\u0026quot;BSgenome.Celegans.UCSC.ce2\u0026quot;), \u0026quot; package.\u0026quot;))) This graph uses a few elements to improve its appearance that you might want to explore if you’re not already familiar with them:\n The labs function is used to add both a title and a caption to the plot. The paste, expression, and italic functions are used together to put “C. elegans” and an R package name in italics in some of the labels on the plot. The scales package is used inside a scale layer for the ggplot2 code to make the y-axis labels a bit nicer. theme calls are used to apply a simpler overall theme than the default and to remove the x- and y-axis titles (with element_blank). The color and fill of the bars are customized in the geom layer (geom_col).  From this plot, it certainly looks like the nucleotides are not uniformly distributed in the C. elegans genome. This question will be investigated more in the next part of the exercise.\n Part B The second part of the exercise asks us to test whether the observed nucleotide data for C. elegans is consistent with the uniform model that all nucleotide frequencies are the same.\nFirst, we can simulate several datasets under this null model and see how a plot of nucleotide frequencies compares to the plot that we obtained with the observed C. elegans data. To make these plots, I first simulated 20 samples under the null model that the distribution is uniform across the four nucleotides, using the rmultinom function with the size argument set to the number of nucleotides in the original C. elegans genome data and the prob argument set to have an equal probability of each nucleotide at each spot on the genome:\n(sim_nuc_freq \u0026lt;- rmultinom(n = 20, size = sum(nuc_freq_df$n), prob = rep(1 / 4, 4))) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] ## [1,] 3545 3427 3397 3544 3516 3400 3503 3456 3480 3431 3387 3533 3434 3466 ## [2,] 3322 3473 3437 3497 3425 3499 3445 3409 3431 3546 3335 3404 3412 3443 ## [3,] 3466 3444 3506 3454 3470 3433 3421 3421 3344 3513 3531 3401 3496 3472 ## [4,] 3461 3450 3454 3299 3383 3462 3425 3508 3539 3304 3541 3456 3452 3413 ## [,15] [,16] [,17] [,18] [,19] [,20] ## [1,] 3316 3444 3448 3418 3380 3562 ## [2,] 3404 3419 3453 3484 3542 3378 ## [3,] 3556 3526 3456 3421 3414 3461 ## [4,] 3518 3405 3437 3471 3458 3393 Next, I moved this into a tibble so I could more easily rearrange and plot the data using facetting in ggplot2:\nsim_nuc_freq_df \u0026lt;- as_tibble(sim_nuc_freq) %\u0026gt;% mutate(nucleotide = c(\u0026quot;A\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;G\u0026quot;, \u0026quot;T\u0026quot;)) %\u0026gt;% pivot_longer(-nucleotide, names_to = \u0026quot;sample\u0026quot;) %\u0026gt;% mutate(sample = sample %\u0026gt;% str_remove(\u0026quot;V\u0026quot;) %\u0026gt;% as.numeric()) %\u0026gt;% arrange(sample, nucleotide) sim_nuc_freq_df %\u0026gt;% slice(1:10) ## # A tibble: 10 x 3 ## nucleotide sample value ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 A 1 3545 ## 2 C 1 3322 ## 3 G 1 3466 ## 4 T 1 3461 ## 5 A 2 3427 ## 6 C 2 3473 ## 7 G 2 3444 ## 8 T 2 3450 ## 9 A 3 3397 ## 10 C 3 3437 ggplot(sim_nuc_freq_df, aes(x = nucleotide, y = value)) + geom_col(fill = \u0026quot;lavender\u0026quot;, color = \u0026quot;black\u0026quot;) + theme_classic() + scale_y_continuous(label = scales::comma) + theme(axis.title = element_blank()) + labs(title = \u0026quot;Simulated neucleotide frequencies under a uniform model\u0026quot;) + facet_wrap(~ sample) + expand_limits(y = max(nuc_freq_df$n)) The y-axis limits were expanded here to cover the same range as that shown for the observed C. elegans nucleotide frequencies, to help make it easier to compare these plots with the plot of our observed data. These plots of data simulated under the null model do show some variation in frequencies among the nucleotides, but it’s certainly much less than in the observed data for C. elegans.\nNext, I repeated this simulation process, but I increased the number of simulations to 1,000:\nsim_nuc_freq_df \u0026lt;- rmultinom(n = 1000, size = sum(nuc_freq_df$n), prob = rep(1 / 4, 4)) %\u0026gt;% as_tibble() %\u0026gt;% mutate(nucleotide = c(\u0026quot;A\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;G\u0026quot;, \u0026quot;T\u0026quot;)) %\u0026gt;% pivot_longer(-nucleotide, names_to = \u0026quot;sample\u0026quot;) %\u0026gt;% mutate(sample = sample %\u0026gt;% str_remove(\u0026quot;V\u0026quot;) %\u0026gt;% as.numeric()) %\u0026gt;% arrange(sample, nucleotide) sim_nuc_freq_df %\u0026gt;% slice(1:10) ## # A tibble: 10 x 3 ## nucleotide sample value ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 A 1 3440 ## 2 C 1 3461 ## 3 G 1 3450 ## 4 T 1 3443 ## 5 A 2 3377 ## 6 C 2 3449 ## 7 G 2 3461 ## 8 T 2 3507 ## 9 A 3 3415 ## 10 C 3 3438 Using this dataframe of simulations, we can measure the mean, minimum, and maximum frequencies of each nucleotide across all 1,000 simulations:\n(sim_summary \u0026lt;- sim_nuc_freq_df %\u0026gt;% group_by(nucleotide) %\u0026gt;% summarize(mean_freq = mean(value), min_freq = min(value), max_freq = max(value))) ## # A tibble: 4 x 4 ## nucleotide mean_freq min_freq max_freq ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; ## 1 A 3447. 3296 3594 ## 2 C 3449. 3297 3671 ## 3 G 3449. 3288 3624 ## 4 T 3449. 3270 3618 To help compare this with the observed data, we can create a table with information from both the original data and the simulations under the null model:\nnuc_freq_df %\u0026gt;% left_join(sim_summary, by = \u0026quot;nucleotide\u0026quot;) %\u0026gt;% mutate_at(c(\u0026quot;mean_freq\u0026quot;, \u0026quot;min_freq\u0026quot;, \u0026quot;max_freq\u0026quot;, \u0026quot;n\u0026quot;), prettyNum, big.mark = \u0026quot;,\u0026quot;, digits = 0) %\u0026gt;% mutate(simulations = paste0(mean_freq, \u0026quot; (\u0026quot;, min_freq, \u0026quot;, \u0026quot;, max_freq, \u0026quot;)\u0026quot;)) %\u0026gt;% select(nucleotide, n, simulations) %\u0026gt;% kable(col.names = c(\u0026quot;Nucleotide\u0026quot;, \u0026quot;Frequency in C. elegans genome\u0026quot;, \u0026quot;Mean frequency (minimum frequency, maximum frequency) across 1,000 simulations\u0026quot;), align = \u0026quot;c\u0026quot;)   Nucleotide Frequency in C. elegans genome Mean frequency (minimum frequency, maximum frequency) across 1,000 simulations    A 4,335 3,447 (3,296, 3,594)  C 1,225 3,449 (3,297, 3,671)  G 2,055 3,449 (3,288, 3,624)  T 6,179 3,449 (3,270, 3,618)    This helps clarify how unusual the observed data would be under the null model—the counts of all four nucleotides in the C. elegans genome are completely outside the range of frequencies in the simulated data.\nAnother way to look at this is with histograms of the distribution of frequencies of each nucleotide under the null model compared to the observed frequencies in the C. elegans nucleotide:\nggplot(sim_nuc_freq_df, aes(x = value)) + geom_histogram(binwidth = 10) + facet_wrap(~ nucleotide) + theme_classic() + scale_x_continuous(name = \u0026quot;Frequency of nucleotide in the simulation under the null model\u0026quot;, labels = scales::comma) + scale_y_continuous(name = \u0026quot;# of simulations (out of 1,000)\u0026quot;) + geom_vline(data = nuc_freq_df, aes(xintercept = n), color = \u0026quot;red\u0026quot;) + labs(title = expression(paste(\u0026quot;Nucleotide frequency in \u0026quot;, italic(\u0026quot;C. elegans\u0026quot;), \u0026quot; compared null model simulations\u0026quot;)), caption = \u0026quot;Red line shows the frequency observed for the nucleotide in C. elegans\u0026quot;) Finally, to help in answering this question, it would be interesting to look at a single measure for each simulation (and for the observed data) rather than comparing each nucleotide one at a time. Chapter 1 gives the equation for a statistic to measure variability in multinomial data by calculating the sum of squares for the differences between the observed and expected count of nucleotides for each of the four nucleotides in a sample (p. 12).\nI calculated this statistic for the observed data and then for each of the 1,000 simulations.\n(obs_stat \u0026lt;- nuc_freq_df %\u0026gt;% mutate(expected = mean(n), stat_input = (n - expected) ^ 2 / expected) %\u0026gt;% summarize(variability_stat = sum(stat_input))) ## # A tibble: 1 x 1 ## variability_stat ## \u0026lt;dbl\u0026gt; ## 1 4387. sim_stat \u0026lt;- sim_nuc_freq_df %\u0026gt;% mutate(expected = mean(value), stat_input = (value - expected) ^ 2 / expected) %\u0026gt;% group_by(sample) %\u0026gt;% summarize(variability_stat = sum(stat_input)) sim_stat %\u0026gt;% slice(1:5) ## # A tibble: 5 x 2 ## sample variability_stat ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 0.0757 ## 2 2 2.52 ## 3 3 0.715 ## 4 4 1.08 ## 5 5 1.31 Here is a plot of the distribution of this statistic across the 1,000 simulations:\nggplot(sim_stat, aes(x = variability_stat)) + geom_rect(data = sim_stat, aes(xmin = quantile(variability_stat, prob = 0.025), xmax = quantile(variability_stat, prob = 0.975), ymin = 0, ymax = Inf), fill = \u0026quot;beige\u0026quot;, alpha = 0.5) + geom_histogram(bins = 30, fill = \u0026quot;white\u0026quot;, color = \u0026quot;tan\u0026quot;, alpha = 0.5) + theme_classic() + labs(title = \u0026quot;Variability from expected values\u0026quot;, subtitle = \u0026quot;Values from simulations under the null\u0026quot;, x = \u0026quot;Value of variability statistic\u0026quot;, y = \u0026quot;Number of simulations with given value\u0026quot;, caption = \u0026quot;The shaded yellow area shows the region of the central 95% of\\nstatistic values for the 1,000 simulations under the null model.\u0026quot;) The value of this statistic for the observed nucleotide frequencies for C. elegans is 4387, which is much larger (indicating greater variability from expected values under the null model) than the value observed under most of the simulations. It is, in fact, far outside the central 95% range of values observed in simulations.\n ","date":1581379200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581477727,"objectID":"22f4b300c757465ac6d281137e95056c","permalink":"/post/exercise-solution-for-chapter-1/","publishdate":"2020-02-11T00:00:00Z","relpermalink":"/post/exercise-solution-for-chapter-1/","section":"post","summary":"This exercise asks us to explore the frequency of each of the four nucleotides (A, C, G, and T) in the genome of C. elegans, a type of worm used frequently in scientific research.\nThis solution requires that several R extension packages be loaded in your R session. If you do not have these packages installed to your computer yet, you should follow instructions we’ve posted separately describing the required set-up for this exercise.","tags":["exercises","Chapter 1"],"title":"Exercise solution for Chapter 1","type":"post"},{"authors":["Bailey Fosdick"],"categories":["Chapter 2","vocabulary"],"content":"  The first portion of Chapter 2 (2.1-2.7) is focused on statistical modeling of data. It introduces a number of distributions commonly used in statistics, as well as model fitting estimation procedures (e.g. maximum likelihood estimation).\nThe vocabulary words for Chapter 2, part 1, are:         statistical inference / up / statistical approach  An upward-reasoning approach that start with data and works towards defining a model that might possibly explain the data.    deduction  Starting from a mathematical/statistical model with known parameters and computing the probability of observing an event.    null model  The model associated with the null hypothesis, which formulates an “uninteresting” baseline.    goodness-of-fit  Evaluation of whether a theorectical distribution/model is appropriate for a data set.    rootogram  Diagram to assess model goodness-of-fit for a data set. Bar chart where the bars “hang” from their theorectical values and will approximately line up with horizontal axis if the model is a good fit to the data.    maximum likelihood estimator (MLE)  A rule, or mathematical formula, that outputs an estimate of a parameter for a model, where that estimate maximizes the probability of the observed data.    conservative (approach)  An analysis approach that errs on the side of caution to avoid concluding an alternative hypothesis (e.g. detecting a signal) when it is not true.    vectorization  In regard to function evaluation, if a vector is supplied to a function that expects a scalar, R will apply the function to each element of the vector.    likelihood function  The probability of the data under a model expressed as a function of the model parameter(s).    estimation  Process of using data to perform inference on population parameters.    statistical testing  Formal decision process to determine if a null model is appropriate for the observed data.    regression  Relating how an outcome measure depends on one or more covariates.    residual  Deviation between the observed data and the expected value of the data point according to a model.    generalized linear model  A class of models for non-continuous or non-negative data that allows regression of an outcome on observed covariates. An extension of linear regression.    chi-squared distribution  A distribution on the non-negative real numbers that is often used in assessing goodness-of-fit (e.g. models fit to contingency tables).    quantile-quantile (QQ) plot  Used to compare two distributions (or samples). Deviations in the plot from the y=x line suggest differences between the two distributions.    quantile  Value corresponding to a percentile of a distribution.    empirical cumulative distribution function (ECDF)  Function with input value x gives as output the probability that a random variable from the distribution is less than or equal to x. Function is defined using a sample and assigning probability 1/n to each data point.    chi-squared statistic  A summary statistic of a data set that has a theorectical chi-squared distribution.    base pairing  The pattern that adenine (A) and thymine (T) are paired (appear with equal frequency) in the DNA of an organism, and similarly cytosine (C) and guianine (G) are paired.    contingency table  Table of counts summarizing the number of times combinations of factor levels were observed in the data set.    Hardy-Weinberg equilibrium (HWE)  Assuming random mating, this principle characterizes the distribution of genotype frequencies as a function of the relative frequencies of each allele.    position weight matrix (PWM) / position-specific scoring matrix (PSSM)  Table giving the probability of each nucleotide at each position    sequence logo  A graphical summary of the position weight matrix or position-specific scoring matrix.     Practice   ","date":1581206400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581281287,"objectID":"2788b54b4b00409516daea264740162d","permalink":"/post/vocabularly-for-chapter-2-part-1/","publishdate":"2020-02-09T00:00:00Z","relpermalink":"/post/vocabularly-for-chapter-2-part-1/","section":"post","summary":"Vocabulary for the first part of Chapter 2","tags":["Chapter 2","vocabulary"],"title":"Vocabularly for Chapter 2, Part 1","type":"post"},{"authors":["Bailey Fosdick"],"categories":["Chapter 1","exercises"],"content":" The code instructions in the exercise statement appear to be outdated. The code below worked on my machine. Note that when asked whether I would like to update packages from the binary version, I said no. (When I said yes, R gave an error.)\nif (!requireNamespace(\u0026quot;BiocManager\u0026quot;, quietly = TRUE)) install.packages(\u0026quot;BiocManager\u0026quot;) BiocManager::install(c(\u0026quot;Biostrings\u0026quot;, \u0026quot;BSgenome.Celegans.UCSC.ce2\u0026quot;,\u0026quot;BSgenome\u0026quot;)) You can see the various data genome data sets available by loading the BSgenome library and typing available.genomes().\nOnce you have the needed packages installed, you can access the sequence data for this exercise via the following commands.\nsuppressMessages(library(\u0026quot;BSgenome.Celegans.UCSC.ce2\u0026quot;)) Celegans ## Worm genome: ## # organism: Caenorhabditis elegans (Worm) ## # provider: UCSC ## # provider version: ce2 ## # release date: Mar. 2004 ## # release name: WormBase v. WS120 ## # 7 sequences: ## # chrI chrII chrIII chrIV chrV chrX chrM ## # (use \u0026#39;seqnames()\u0026#39; to see all the sequence names, use the \u0026#39;$\u0026#39; or \u0026#39;[[\u0026#39; operator ## # to access a given sequence) seqnames(Celegans) ## [1] \u0026quot;chrI\u0026quot; \u0026quot;chrII\u0026quot; \u0026quot;chrIII\u0026quot; \u0026quot;chrIV\u0026quot; \u0026quot;chrV\u0026quot; \u0026quot;chrX\u0026quot; \u0026quot;chrM\u0026quot; Celegans$chrM ## 13794-letter \u0026quot;DNAString\u0026quot; instance ## seq: CAGTAAATAGTTTAATAAAAATATAGCATTTGGGTT...TATTTATAGATATATACTTTGTATATATCTATATTA class(Celegans$chrM) ## [1] \u0026quot;DNAString\u0026quot; ## attr(,\u0026quot;package\u0026quot;) ## [1] \u0026quot;Biostrings\u0026quot; length(Celegans$chrM) ## [1] 13794 The Biostrings packages provides functions to summarize the sequence. For example:\nlibrary(\u0026quot;Biostrings\u0026quot;) lfM = letterFrequency(Celegans$chrM, letters=c(\u0026quot;A\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;G\u0026quot;, \u0026quot;T\u0026quot;)) lfM ## A C G T ## 4335 1225 2055 6179 sum(lfM) ## [1] 13794 ","date":1580947200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581008738,"objectID":"8d16e489e5ef46020884190c7e09cad2","permalink":"/post/chapter-1-exercise-setup/","publishdate":"2020-02-06T00:00:00Z","relpermalink":"/post/chapter-1-exercise-setup/","section":"post","summary":"Instructions on how to get started on Chapter 1, exercise 1.8.","tags":["Chapter 1"],"title":"Chapter 1 exercise setup","type":"post"},{"authors":["Brooke Anderson"],"categories":["quiz","Chapter 1"],"content":" The vocabulary quiz will be live here during the start of the course.\nLoading…  ","date":1580947200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580933164,"objectID":"3bb9cd5326655191aa8e191c887845d2","permalink":"/post/chapter-1-vocabulary-quiz/","publishdate":"2020-02-06T00:00:00Z","relpermalink":"/post/chapter-1-vocabulary-quiz/","section":"post","summary":" The vocabulary quiz will be live here during the start of the course.\nLoading…  ","tags":["quiz","Chapter 1"],"title":"Chapter 1 vocabulary quiz","type":"post"},{"authors":["Brooke Anderson"],"categories":["instructions","vocabulary","blogdown","github"],"content":" As one of your assignments for this class, you are responsible for creating a blog post with all the vocabulary and definitions for one week of the course. This blog post will explain how you can create and publish that blog post on our course website.\nCreate the blog post Update your fork of the website You should have already forked our website to add your details for the “Person” section. You can use this same fork to add your blog post, but you should make sure you get your fork up-to-date with the current version of the website before you do.\nA fork of a repository does not stay up-to-date with the original repository it copied by itself. Instead, unless you update it, it will continue to be a snapshot of the original repository (plus any changes you’ve made to your copy) as of the time when you forked it. If the original has made a lot of changes since you made your fork, it might be very hard to make a clean pull request as there will be (potentially) lots of conflicts because of changes made to the original. It’s considered polite to make sure that you’re working with an up-to-date fork of a repository if you want to make a pull request back to the original.\nTo update your fork of the original repository, open your “csu_msmb.Rproj” file to open our website’s R Project on your computer. This should open RStudio with the website’s project open (check the top right corner of your RStudio window to confirm—it should say “csu_msmb”).\nThere is a little blue gear symbol in the “Git” pane in RStudio. Click on the down arrow to the right of it and select “Shell…”. This should open a bash shell on your computer. (If your computer uses Windows, there’s a chance that it might open something other than a bash shell. In that case, you can change your preferences in RStudio to reconfigure to always use a bash shell terminal when you ask for a shell from RStudio.)\nIn this shell, you need to run two git commands. First, you’ll add a remote branch to your repository. You already have one remote branch called “origin”—that’s the GitHub repository that you have in your account, which you forked from the original. Now you’ll add the original (the GitHub repository in my account) as another remote branch. Each branch has its own name, and you can use that name to refer to it in later git commands. The convention, if you add an original repository that you forked from as a remote, is to name that remote branch “upstream”. Run the following code in your bash shell to add the original GitHub repository as a remote branch with the name “upstream”:\ngit remote add upstream git@github.com/geanders/csu_msmb.git Now that you have added the original as a remote, you can pull in any commits that were made to it since you originally forked it. There are a few ways you can do that, but one way to do it in one step is with git’s pull command. This fetches the changes and merges them into your local version of the repository, all in one step. Run the following code in your bash shell to do that:\ngit pull upstream master Ideally, all this will have worked seamlessly (if not, check with the faculty and we can help you troubleshoot). Close your bash shell and check your version of the “csu_msmb” project to see if it looks like it’s up-to-date with the original. You can go to the “Commit” button in the “Git” tab, and there is a “History” selection in the window that pops up. Look through that and make sure that you see recent commits to confirm that your version is now up-to-date.\nFinally, this has updated your local version, but not your GitHub remote. Go ahead and use the green up arrow in RStudio’s “Git” pane to push your updated local version up to GitHub. Now both your local (“master”) and remote (“origin”) branches should be up-to-date with our original version, so it will make it much easier to merge in your changes.\nIf you’d like to learn more about this process, there’s a really nice blog post here.\n Making a new blog post In blogdown, each blog post is an RMarkdown document. The stuff at the very top of the file (the YAML with details like the title and author) will look a bit different than plain RMarkdown files, but once you get into the body of the post, you should find that the rules are very similar to RMarkdown.\nYou will be creating a blog post that will include a table with the vocabulary list as well as a few other elements. There are a few ways you can add a new blog post file in blogdown. You’re welcome to use any method you’d like, but if you’re not sure where to start, this is one way.\nMake sure that you have RStudio open to the project for our course’s website. If you do, you should see csu_msmb in the upper right hand corner of your RStudio session. (If not, go to File -\u0026gt; Open Project... and navigate through your file directory to your local version of our project directory and open the csu_msmb.RProj file there.)\nNext, you can use an RStudio “Addin” to make a new blog post using a nice user interface. These Addins are all alternatives to things you could do with a function call in R, but the Addin often provides a more immediately user-friendly interface for you to enter options. For example, the Addin for creating a blog post does all the actions of a blogdown function called new_post, but instead of needing to remember the parameter name to use for the author listing and the title and all that, you can just fill the information into a nice form and go from there.\nTo find the new post Addin, look at the top of your RStudio session window. You should see “Addins” with a down arrow beside it. Click on the down arrow. When you do, you should see a “New Post” option. Select this option. A form should pop up with spaces for you to fill in the title, author, and some other details.\nFill this form out in the following way:\n Title: This should be “Vocabulary for Chapter [x]”, but with “[x]” replaced with your chapter number. Author: Make sure you put your name exactly as listed in the “People” section of the website. This will help the website generator connect this post with your user profile, so when someone reads it they’ll get your picture and a link to find out more about you at the end of the post. Date: This is where you put the publication date of your blog post, and it has a pretty cool feature. Even if you write your blog post earlier, the post will not be published on the blog until the date listed in this section. That means that you can start writing your blog on one day but know that it won’t show up online until later. It also means you can start work on your blog, but a half-finished draft won’t show up online until you get to the publication date. For right now, set the current date in this section, so that your blog post will show up locally as you work on it, but later you’ll actually change this date so that, when you submit your pull request, your post won’t show up until the faculty have had the chance to suggest some changes and for you to make any needed fixes. Categories and tags: For both the “Categories” and the “Tags”, be sure to include vocabulary and Chapter [x] (with [x] replaced with your chapter’s number). These tags will let everyone on our website quickly find all the blog posts on your chapter or all the vocabulary lists. Format: You have several choices for the type of file to use to write your blog post. Since we’re going to be using some R code to make the table look pretty, you’ll need to pick one of the options that allows for R code chunks, so that rules out plain Markdown. I recommend that you use “.Rmd”.  Once you make these entries, click the button labeled “Done”. This creates an RMarkdown file for your blog post and opens it for you. Here’s an example of me doing this process if I were writing the vocabulary list for Chapter 16:\nYou can see, in the RMarkdown file that’s created and opened, that all these details end up getting inserted into the YAML at the top of the RMarkdown file. If you ever need to change anything (like the date or the title), you can change it here in the RMarkdown file. Do so carefully, though—YAML can be pretty picky about things like spacing and special characters (hyphens, for example).\nIf you ever need to find this file later, all of the blog posts are saved in a special place in our project’s directory: in the content subdirectory, there’s a subdirectory called post that contains both the RMarkdown files used to write the posts and the output (an HTML file) that is created by the RMarkdown each time you save the file. You might notice that they all have long file names—the file name for a blog post is a combinataion of its publication date and its “slug”, which is some abbreviation of the original title. If you really want, you can change what the slug will be when you first create the blog post, but I don’t think you really need to.\n Writing in the blog post   via GIPHY Within the body of the blog post RMarkdown file (in other words, below the --- that marks the end of the YAML section), you can write the blog post just as you would any RMarkdown document. This means that you can use things like ** to mark bold text, * for italics, and #, ##, etc., for section headings.\nIt also means that you can insert chunks of R code that will run and add their output within the post. Unlike in regular RMarkdown, you usually won’t have to press the Knit button to knit the document. Instead, the blog post should re-knit every time you save the file. You can check to see by looking at the Viewer pane to look at the current version of the site (if it doesn’t show the site automatically, load the blogdown package and then run serve_site).\nIf you have not worked much with RMarkdown before, you might want to check out some references on how it works. There are several great articles on the RMarkdown website that can help.\nIn your blog post, go ahead and draft a first paragraph that describes the key concepts covered in the chapter. Also, create third-level section headings (i.e., use ### to mark the section heading) for “Sources consulted or cited” and “Practice”. Save your blog post file and check to see if these changes have been made in the version of the website in your Viewer pane!\n  Create the vocabulary list Now, for the content of your post. You’ll be creating a vocabulary list, as well as embedding a Quizlet practice app, so that your classmates can learn the vocabulary for the chapter. This list will be what everyone is responsible for in the weekly vocabulary quiz.\nYou can see an example of a vocabulary blog post for Chapter 1. You can use this as a template for your own post.\nIdentify the vocabulary terms you need to define First, you will need to decide which words from the chapter to define. We expect that you will include all the bolded terms for your chapter. Here are some guidelines for deciding on the vocabulary terms to define for your chapter:\n You should include all words in the chapter that are given in bold. Be sure to look for bolded terms in the sidenotes and end-of-chapter exercises, too! Occassionally, the authors use bold for subheadings (see the “Why R and Bioconductor?” section in the Introduction or the “Summary of this chapter” section of Chapter 1). These subheadings do not need to be included in the vocabulary list for the chapter. If you find one or more common synonyms for a term, you can include that with the term in the list (e.g., “variability / spread / dispersion”). Feel free to change a term from singular to plural or vice versa if it helps you in writing the term’s definition. Similarly, if the bolded term does not include all the words that would be helpful (e.g., the bolded term is “sufficient”, but the term of interest is “sufficient statistic”), you can add a word or two to the bolded term. The bolded terms in the book tend to favor statistical terms over biological ones. If there are some biological terms you needed to look up when you read the chapter, or that you think some people in the class might not know, feel free to add them to your vocabulary list.   Create a .tsv file with terms and definitions While you could directly add the vocabulary into an RMarkdown table, we are asking you to save it into a plain text .tsv file, which will then be read into the RMarkdown document to form a table. We doing this because it creates a few advantages. First, if we have the vocabulary list in a dataframe (which we get when we read it in from a plain text file), we can use some cool R packages to format the table nicely, without having to learn loads of new Markdown or HTML formatting tricks. Second, we want to also use the vocabulary list as input to a Quizlet list, which will let us embed a practice app with flashcards and quizzes. One of the easiest ways to create a Quizlet list is to copy in vocabulary list directly in the tsv format, so this approach makes that secondary use easy.\nIn our website’s repository, there is a special subdirectory for saving vocabulary list .tsv files, with one for each chapter. In the Project directory, go to content -\u0026gt; post -\u0026gt; vocab_list. This is where you want to save the .tsv file for your chapter.\nTo create the file, in RStudio go to the “File” tab in the menu at the top and select “New File” -\u0026gt; “Text File”. This will open a file in RStudio in plain text format. Save the file as “chapter_[x].tsv” (but replace “[x]” with your chapter number). Make sure you save it in the “vocab_list” subdirectory of the project with the rest of the vocabulary list files.\nNow write your vocabulary terms and definitions in this .tsv. This file extension stands for “tab-separated”, so to format the file correctly, you should:\n Put each term / definition pair on its own line. Because some terms will be long, they may visibly “wrap” in the text file you have open, but as long as you don’t press the “Return” key, they should still be on one line of the file. To doublecheck, you may want to make sure that you have line-numbering on in RStudio and make sure that only one line number is listed for each term on the left hand side of the file. Press the “Tab” key to add a tab between the term and definition on each line. This should be the only place you have tabs in the file. R will look for tabs to figure out where to split between vocabulary terms and there definitions (as will Quizlet when you copy the terms into the list there). Sometimes it won’t look like the tab’s added a lot of space, but that’s no problem—the computer can see it even if you can’t! Don’t put any header information at the start of the file. Just start directly with your first vocabulary term.  If you’d like to see an example, check out the “chapter_1.tsv” file in the “vocab_lists” subdirectory. This is the file that serves as input for the Chapter 1 vocabulary list blog post.\nHere are some guidelines for writing your definitions:\n It is fine to use wording from the chapter text or to use wording directly from other websites or sources. However, you must include a list of any of the sources that you used to write your definitions at the bottom of the vocabulary blog post. Further, if you are using sources besides the course textbook, make sure that the definition is appropriate in the context of our course. Often, words will have a number of different definitions across different disciplines. Try to use more formal sources (e.g., textbooks, other published books) rather than less formal websites to find definitions whenever possible. See the Chapter 1 vocabulary list for an example of what we expect for using and listing references. If a vocabulary term was defined in a previous chapter’s vocabulary list, feel free to reuse the definition. Our library has excellent resources that you can use to help write your definitions, including textbooks and dictionaries specific to biology and statistics.   Adding R code to show the list in the post I’ve written up some R code that will read in the vocabulary list and make it into a nicely formatted table in the HTML version of the blog post. You can re-use this R code in your post, you’ll just need to change the name of the input file to the one for your chapter’s file.\nThis R code uses a few R packages beyond the base R code. If you haven’t installed these packages yet, you’ll need to before the code will run. You’ll need to install:\n knitr dplyr readr kableExtra  Once you have these, below your paragraph summarizing the chapter’s theme, write:\n “The vocabulary words for Chapter [x] are:”\n (but with your chapter’s number) and then paste in the following code and change chapter_1.tsv in the code to the correct file name for the .tsv file you created for your chapter’s vocabulary.\n```{r echo = FALSE, message = FALSE, warning = FALSE} # Load packages library(dplyr) library(readr) library(knitr) library(kableExtra) # Read in vocabulary from tsv into a dataframe # This is where you'll need to replace the file name with your own vocab % kable(align = c(\"rl\"), col.names = c(\"\", \"\")) %% kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\")) %% column_spec(1, bold = T, border_right = T) %% column_spec(2, width = \"30em\") ``` This code reads in the data from your .tsv file and then formats it in a nice way. If you’d like to understand it better, try commenting out some lines and see how it changes the output. One of my favorite piece of this code, one that I think might come in useful for you later, is column_spec(2, width = \"30em\"). This sets the width of one of the columns to be 30 ems (the width of the letter “m” in whatever font you’re using). By setting the width, the table won’t automatically expand to fit the text you put in the column onto one row. Instead, it will allow the text to “wrap”, going onto separate lines if the definition entry is long enough.\nIf you want to find out more about creating really fancy tables from RMarkdown, check out the documentation on the kableExtra package. What you can do (and how) is different, depending on whether you’re outputting to a pdf or a HTML file, so there’s separate documentation for each.\nOnce you add this code in, I’ve found that you actually do need to press the Knit button sometimes. If you don’t see your list when you save your file, or if it doesn’t update properly as you make changes to your file, try knitting with the Knit button and that should help.\n Creating and embedding a Quizlet app The last piece of the blog post is the practice section. For this, you’ll create a vocabulary list on Quizlet, which you can then embed in the blog post, so the other students can practice right on our site.\nYou’ll need to sign up for a Quizlet account first. The free account is fine.\nNext, create a new vocabulary list. There’s a “Create” button for making new lists on the main page. While you can add vocabulary by hand, you can also post in a whole list if it’s in a tab-separated or comma-separated format. Copy in the contents of your vocabulary list .tsv file. You can preview the terms lower on the page once you do, to make sure that all the terms and definitions came in correctly. If everything looks good, click on the buttons for “Import” and then “Create”.\nThis will create your list and take you to a page where you can try out your flashcards. On this page, there’s also a button with three dots. If you click on this, there’s a choice of “Embed”. When you embed HTML content, you are inserting an application from one website within another one. Embedding is a really fun trick for enriching blog posts and other RMarkdown documents that are rendered to HTML. For example, you can also embed Shiny apps, YouTube videos, and Google maps in your RMarkdown using the same process we’ll use here.\nWhen you select “Embed”, a pop-up window will open with some HTML code. Copy this and then paste it in the “Practice” section of your vocabulary blog post. Be sure to leave a blank line above and below the text you paste. When you look at your blog post in a web browser now, you should see the practice flashcards embedded in the “Practice” section.\n  Submit the post   via GIPHY So far, you’ve made these changes to your local copy of our website’s repository. To submit the changes to us, you’ll need to push your changes to your remote version of the repository (the one in your GitHub account) and then submit a pull request to us for us to pull those changes into the original website repository (the one in my GitHub account). This process should feel pretty familiar—it’s pretty much what you did to submit your changes to your profile information for the website on the first day of class.\nAs with other steps, there are several ways you can do this, and if you have an idea of how to get it done, any way is fine. If you don’t know where to start, though, you can follow along in this section for one way to do it.\nPushing your changes to your remote repo First, you’ll need to get any changes you’ve made from your local repository up to your remote version on GitHub.\nFirst, commit any changes that you’ve made through the Git window in your RStudio session. This will record the changes you’ve made in the git record for your local repository.\nNext, you’ll need to push these commits to the remote repository, to send these changes to GitHub. In the Git window in RStudio, there’s a green up button. Push that. It should send all your changes up to your GitHub version of the repository. To check, go online to your GitHub account and look through your repositories for your fork of “csu_msmb”. Click on “Commits” to see a history of the commits to the repository—your latest ones should be at the top of the list.\n Submitting a pull request to the original repo At this point, you’ve made changes, checked them, and pushed them to your GitHub version of the repository. Remember, though, that you forked the repository from our original one, and so you’ve been working with a copy of the repository this whole time, rather than changing our original version.\nTo get your changes incorporated into our original version, you’ll need to request that we pull your changes into the original repository. To do this, you can submit a pull request through GitHub. Go to the main page for your fork of the GitHub repository and look for a button that says “New pull request”. When you click this, it will walk you through making a pull request. You’ll have a space to write a message describing the changes you’re recommending in the pull request.\nIf you’d like more details on this information, GitHub has help documentation on pull requests.\n  Edit and re-submit the post based on faculty feedback The other faculty members and I will get a notice when you submit your pull request. We’ll take a look and will probably have some suggestions for the wording of some of the vocabulary terms. We’ll give you some feedback through the pull request page, and then we’ll work together to get the list finalized before it’s published for the rest of the class.\n ","date":1580774400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580751472,"objectID":"b6a63bb5b3e96b091185e33290708428","permalink":"/post/creating-a-vocabulary-list-blog-post/","publishdate":"2020-02-04T00:00:00Z","relpermalink":"/post/creating-a-vocabulary-list-blog-post/","section":"post","summary":"As one of your assignments for this class, you are responsible for creating a blog post with all the vocabulary and definitions for one week of the course. This blog post will explain how you can create and publish that blog post on our course website.\nCreate the blog post Update your fork of the website You should have already forked our website to add your details for the “Person” section.","tags":["instructions","vocabulary","blogdown","github"],"title":"How to create a vocabulary list blog post","type":"post"},{"authors":["Brooke Anderson"],"categories":["blogdown","github","instructions"],"content":" One goal of this course is to continue developing your data science programming skills. This will include plenty of work on R programming, but also more to help you learn tools for reproducible research, like RMarkdown and git.\nWe will be using our course website as a collaboration tool during this course. This website was created using blogdown, which allows you to create and update a blogging website with R and RStudio. We are using a GitHub repository to share all the code for this website and serving the site using Netlify.\nDuring this course, you will have two graded products that you will need to submit as blog posts to our site. One will be a glossary of vocabulary terms for one chapter of the book, listing key words and their definitions for the chapter. The second will be the “official” version of one week’s in-course exercise.\nTo help get you up to speed with using blogdown, GitHub, and RMarkdown with our site, we’ll start by having you update your profile details for our website. We’ll also use this to give you all a chance to introduce yourselves to each other and to us. This post covers the details for how to do that.\nRequired set-up This exercise, and this course as a whole, requires a certain set-up on your computer:\nR installed on your laptop RStudio installed on your laptop git installed on your laptop Your own GitHub account  If you already have all this set-up, you can skip to the next section. Otherwise, this section has details on completing this set up.\nInstall R on your laptop You can install R from the Comprehensive R Archive Network (CRAN). Search for the version appropriate for your computer’s operating system.\nIf you already have R installed, check your version number. If it’s older than six months or so, you should probably update your version for the class. You can use the sessionInfo() function to find out details about your current R session, including the version of R you’re currently running:\nsessionInfo() ## R version 3.6.2 (2019-12-12) ## Platform: x86_64-apple-darwin15.6.0 (64-bit) ## Running under: macOS Mojave 10.14.6 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] compiler_3.6.2 magrittr_1.5 bookdown_0.17 tools_3.6.2 ## [5] htmltools_0.4.0 yaml_2.2.1 Rcpp_1.0.3 stringi_1.4.5 ## [9] rmarkdown_2.1 blogdown_0.17 knitr_1.27 stringr_1.4.0 ## [13] digest_0.6.23 xfun_0.12 rlang_0.4.4 evaluate_0.14 Based on the return from this call, for example, I can tell that I have R version 3.6.2 (2019-12-12).\n Install RStudio on your laptop You can download RStudio directly from their website. The free Desktop version will work great for this course. If your version of RStudio is more than a year old, you should probably update it for this course. To check your version of R Studio, open R Studio, go to the “RStudio” tab at the top, and click on “About RStudio”.\n Install git on your laptop The software git is version control software, which will help you record and track changes that you’ve made to code and other plain text documents.\nIt’s free to download. Go to https://git-scm.com/downloads and select the version for your operating system. For this software, you’re probably okay if you downloaded it a little while ago (although if more than two years or so, you might want to update).\n Get a GitHub account You will need a (free) GitHub account for this course. You can sign up for one (if you don’t already have one) at https://github.com/. While there are some fancier paid plans available, the free account will work great for this class.\nWhen you sign up, you’ll get to choose a GitHub handle. You might want to make this something that will be easy for people to remember. For example, if your name is still available, that would be a great option. This handle will form part of the address to all of your GitHub repositories, so it is convenient if it is easy for people you work with to remember (mine, unfortunately, is not!).\n  About blogdown The blogdown package is an R package created by Yihui Xie that allows you to use R and RStudio to create and update your own webpage with a blog. The appeal of being able to do this with R is that you can write blog posts using RMarkdown, so you can include executable R code in each post.\nblogdown creates your site using the Hugo framework. Hugo is software that can build static websites (i.e., ones that can be served to viewers without needing database backends or other fancy things). People have created different templates for Hugo-generated websites, and these templates provide the structure and framework, while you can adapt the content.\nThis means that our website (which is, essentially, a collection of files in a directory written in a form that a web browser can convert to a pretty website) includes a lot of files and code that come straight from a template that someone else wrote, and then places here and there where we can add or change the files to make the website ours.\nOne of the ways that you can change the website is to add posts. You’ll be doing this later in the course by contributing two blog posts of your own, one on the vocabulary for a chapter and one with the “official” version of the exercise for a chapter. We’ll cover more on how to add a blog post later in the course.\nThe other way that you can change the website is to change some of its “front page” data. The website has a section on “People”, with the profiles of everyone in the class. The information shown in this section is all saved in plain text files in our website’s file directory. Today, you’ll change you details in the file dedicated to you and then send those changes back to us so we can update the online version of the site.\nYou will need to install two pieces of software to work on our website. First, you’ll need the R package blogdown. You can install this package in the normal way, using install.packages:\ninstall.packages(\u0026quot;blogdown\u0026quot;) Once you have blogdown, you can install the Hugo software using a function in the blogdown package, install_hugo:\nlibrary(blogdown) install_hugo() For both these installations, your computer will need to be online or you’ll get an error.\n Getting a fork of our repository on your computer All our websites files are posted in a GitHub repository at https://github.com/geanders/csu_msmb. With this (or any) GitHub repository, you can suggest changes by forking the repository, cloning the fork to your computer, making and committing the changes, pushing those commits back up to your fork of the repository on GitHub, and then submitting a pull request.\nForking a GitHub repository   via GIPHY When you fork a GitHub repository, you get a copy of that repository that you can play around with and change yourself, without it affecting the original repository. It’s essentially just copying the whole repository, with all its files, into a repository on your GitHub account.\nThe only thing that makes it different from a plain copy (and what makes it really powerful in some cases) is that, if you decide that your changes might make the original repository better, you can submit a pull request. This requests that the owners of the original repository update it to incorporate the changes you’ve made on your fork of the repository. The original authors can review each of the commits you’ve made, so they can even cherry-pick your changes if they want.\nGitHub also lets the original authors see if there are any merge conflicts created from changes that they’ve made to the original repository since you forked it. This can let the original authors see how hard it will be to incorporate all of your changes in the forked version with their version of the repository.\nTo fork the repository with our course’s website materials, all you’ll need to do is go to our GitHub repository for the course website (while you’re signed in to GitHub) and click on the “Fork” button towards the right of the page. Now go and check in the “Repositories” section of your own GitHub account—you should see that you now have a forked copy of the “csu_msmb” repository.\nIn this exercise, you’ll work with the fork of the repository, and then once you’ve made your changes, you submit a pull request, so that we can get your changes back into the main webpage.\nIf you need more help on how to fork a repository, GitHub has a help page on the topic that might be useful.\n Cloning the fork to your computer Next, you’ll want to get a copy of your forked repository onto your own computer, where you can work with it, make changes, and preview the website with your updates.\nTo do this, you’ll clone your fork of the repository onto your computer. The version of the repository on GitHub is called the remote branch of the repository and the version you get on your computer once you’ve cloned it is the local branch. By cloning (instead of just downloading), you’ll maintain a connection between the remote and local versions through git, which will allow you to push changes that you make and commit on your own computer up to the remote branch on GitHub.\nGo to GitHub, make sure you are logged into your account, and navigate to your forked version of the repository for this class. There should be a button to the right of the page that says “Clone or download” (you may need to scroll down to find it).\nWhen you click on this button, it will give you a choice between “SSH” and “HTTPS” for the protocol to use to connect your local and remote branches of the repository. You’re welcome to try either, but I usually (on a Mac) have better luck with “SSH”. Occasionally, people running Windows in my courses have had better luck with “HTTPS”, although for most folks “SSH” seems to work fine. Once you choose which protocol to use, you can copy the snippet of code that is given in the pop-up.\nNext, you’ll run this code from a bash shell on your own computer to clone the repository. You first will need to open a shell. If you’re on a Mac, you can do that with the “Terminal” application. With Windows, you’ll probably need to use the bash shell that comes with the Windows version of git. Search your programs for “bash” or “git bash” and see if you see something that looks promising.\nOnce you open a shell, you’ll see a command prompt, like this:\nusername$ You can type shell commands here and then press “Return” to run them. You should first move into the directory where you want to clone the repository. Your “Desktop” might be a good place for it for now (unless you have some organization you use for course-related files). The cd shell command lets you “change directory”. If you don’t put anything after cd, it will change to your home directory. Otherwise, it will move to the directory you specify. For example, if the “Desktop” directory is a subdirectory of my home directory, I could move into it by running:\ncd Desktop If you have not use shell commands much before and are having any problems navigating to the directory you’d like, let us know in class, and one of us can help you.\nOnce you are in this directory, you’ll paste git clone followed by the command you copied from the “Clone or download” button on GitHub. It will probably look something like this (but with your GitHub handle in place of “geanders”):\ngit clone git@github.com:geanders/csu_msmb.git When you run this, you may have to put in your GitHub username and password. You may also get some questions about whether you really want to download the repository (you do). If everything’s successful, you should see that there’s a new directory called “csu_msmb” in which directory you decided to put it (“Desktop”, for example).\nThis directory has a special file in it that makes it an R Project—a special version of a file directory with some extra structure and saved preferences. Make sure that you open the project as a whole when you work on it in R Studio, rather than opening just by clicking on one of the files. To do this, you can go in R Studio to \"File\" -\u0026gt; \"Open Project...\" and then navigate through your file directory to the “csu_msmb” directory you just cloned.\nIf you need more help, GitHub has a help page with more on how to clone a repository from GitHub to your own computer.\n Changing and committing in RStudio When you have R Studio open to an R Project that is using git version control, R Studio will include a “Git” pane. You can use this pane to commit changes you make to files in the repository, write messages explaining those commits, and push your changes to your remote branch of the repository on GitHub.\nWhen you commit a change, that change is written into a log of every change made to the files in the repository. You can later look through these commits, so you’ll want the commit messages to make sense when you read them in the future. When you’re collaborating with others, the commit messages will help you see what each other are doing.\nWhen you first commit a change, the commit is only saved in your local branch. To send it up to the remote branch of the repository on GitHub, you’ll need to push those commits. Once you push your local commits, your GitHub repository should exactly mirror your local repository.\nAs soon as you make a change to a file in the repository that’s being track by git, that file will show up in the Git pane, with a little check box beside it. When you’re ready to commit a change, click on the “Commit” button on the top left of the Git pane. This will open a pop-up box.\nIn this box, click the check boxes for all the changed files on the left you’d like to include in the commit. Then write a short commit message, describing the changes you’ve made. You should try to fit it all in the first line of the “commit message” window. If you can’t, write a short description in the first line, skip a line, and then you can write as much as you want.\nOnce you’ve written your commit message, click on the “commit” button. This will record this commit. To check that it has, you can go to the “History” tab and make sure the commit shows up as the last thing in your history.\n  Updating your profile details Rendering blogdown websites in RStudio Once you’ve opened the R Project with our website, you can use the blogdown package to serve the website. This will only update and show the website on your computer (not change our main website online), but it lets you check that everything’s working and preview what the site will look like online.\nRStudio’s “Viewer” pane can work as a web browser. This means that it can show our website. When you have opened the R Project with the cloned repository of our website (“csu_msmb”), try running the following in your R console to render the site:\nlibrary(blogdown) serve_site() If everything worked, you should be able to see a version of the website in your RStudio “Viewer” pane. If you’d like to see it in your usual web browser, click on the “Show in new window” button on the top left of the “Viewer” pane (this looks like a little rectangle with an arrow on it). This will open the website in your default web browser.\nTake a look at the web address when you do—it should start with 127.0.0.1. This is a loopback address—an IP address that refers back to your local computer (localhost), rather than an outside web servers. Anytime you’re building a website and checking it locally, you’ll see this in the web address when you open the site in a web browser. (You can even get T shirts with “There’s no place like 127.0.0.1”).\nAs you work through the next parts of the exercise, the rendered website in the Viewer pane should update every time you save your changes to files in the website. If you have the website open in your default browser, too, you might want to refresh the site with the normal “Refresh” button for your browser. If things ever seem like they’ve gotten out of sink, you can always re-run serve_site().\n Navigating the website’s file directory to find your profile We all have our own author profile in a subdirectory within the website’s files. To find yours, go to the “content” subdirectory of the website files and then the “authors” subdirectory within that. You should see a subdirectory there with your name. Click on that and you’ll see the two files that make up your author profile, \"_index.md\" and “avatar.jpg”.\n Updating your information in \"_index.md\" Your details are all given in the \"_index.md\" file in your author subdirectory. To update your details on the website, you’ll need to change your details in this file.\nThe file is written in a Markup language called YAML. If you’ve used RMarkdown before, you might recognize this syntax from the information that goes at the very top of each RMarkdown file.\nIn your \"_index.md\" file, anywhere there is a placeholder, like “[Year]” or “[Institution]”, replace the placeholder with your own information.\nBe very careful when changing things like spaces and hyphens in the structure, as YAML is based on parsing these elements. As with any Markup language, as you are learning it, it’s best to try to render the final document often as you make changes, so you can make sure the changes make it through like you want and so you can catch any problems quickly.\nMake sure you change the following sections:\n bio: education: email: interests: name: organizations:  Some of the sections in social: are commented out, including the information for buttons for GitHub, GoogleScholar, and Twitter. If you have accounts through any of these services, you can add these buttons with your updated information. Just delete the # at the beginning of all lines in that section and then change the handle or web address information so that it links to your account for that service. In this section, also update your email address, with mailto: at the beginning, for the email icon.\nThe very bottom of the file, under the ---, provides space for you to write a paragraph summarizing who you are and your academic / research interests.\nBe sure to save the file after you’ve made all your changes.\nFor an example of a completed \"_index.md\" file, you can see mine here.\n Updating your avatar picture There’s also a place in your author profile directory to include a photo to represent yourself. To change from the default (the blue guy), replace the “avatar.jpg” file in your author profile directory with the JPG of your choice, and use the same file name (“avatar.jpg”).\nIt would be helpful for you to use a photo of yourself, since that will help us put names with faces, but if you don’t have one or would prefer not to use your own photo, feel free to pick any photo (for which you have appropriate permissions) to use.\nYou might need to crop your photo some to get it to show up in the circle on the website correctly. Try with your uncropped picture once, check the website in the RStudio Viewer pane to see how it looks, and then if it doesn’t work, play around with cropping it until you’re happy.\n  Submitting your updates Pushing the commits back to GitHub When you are ready to push all the changes you’ve committed to your local branch, you can do this from the Git pane in R Studio. In this pane, there are two arrows: a green up arrow and a blue down arrow. Click on the green up arrow to push the commits from your computer (the local branch) to GitHub (the remote branch). Visit your GitHub page for the repository (or refresh it if you already had it open) and check if your changes have successfully been pushed to the remote branch.\nIf you haven’t created an SSH key and shared it with GitHub, you may be asked for your GitHub password every time you try to push. This will get to be a pain, so you’ll probably want to set up an SSH key. For more on how to do this (as well as other help with using RStudio with version control), check out RStudio’s help documentation on the topic.\n Requesting that we pull your changes   via GIPHY At this point, you’ve made changes, checked them, and pushed them to your GitHub version of the repository. Remember, though, that you forked the repository from our original one, and so you’ve been working with a copy of the repository this whole time, rather than changing our original version.\nTo get your changes incorporated into our original version, you’ll need to request that we pull your changes into the original repository. To do this, you can submit a pull request through GitHub. Go to the main page for your fork of the GitHub repository and look for a button that says “New pull request”. When you click this, it will walk you through making a pull request. You’ll have a space to write a message describing the changes you’re recommending in the pull request.\nIf you’d like more details on this information, GitHub has help documentation on pull requests.\n  ","date":1578873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578952088,"objectID":"aaf734a217c669a7993ece1eb560bb61","permalink":"/post/add-profile-details/","publishdate":"2020-01-13T00:00:00Z","relpermalink":"/post/add-profile-details/","section":"post","summary":"One goal of this course is to continue developing your data science programming skills. This will include plenty of work on R programming, but also more to help you learn tools for reproducible research, like RMarkdown and git.\nWe will be using our course website as a collaboration tool during this course. This website was created using blogdown, which allows you to create and update a blogging website with R and RStudio.","tags":["blogdown","github","instructions"],"title":"How to add your profile details to our course website","type":"post"},{"authors":[],"categories":["vocabulary","Chapter 1"],"content":"  Chapter 1 covers generative modeling for discrete data. It introduces a number of terms covering probablity and statistical modeling, as well as a few biological terms. The vocabulary words for Chapter 1 are:\n        probability model  A mathematical description of the possible outcomes of an experiment and the probability of each of those outcomes.    vector  In programming, a one-dimensional array of data, all with the same data type.    discrete event  In statistics, an event that can take a finite or countable number of values (e.g., number of deaths in a community by day).    categorical variable  A variable that can belong to one of a finite set of levels.    levels  In the context of a categorical variable, the set of values to which the variable can be assigned.    factor  In the context of statistical programming, a data type that can take one of a limited number of possible values (e.g., sex, nationality).    exchangeable  A property of a vector of random variables that implies the order in which the variables appear in the vector doesn’t matter.    sufficient statistic  A (summary) statistic that contains all the information about the model parameters that is in the original, uncondensed form of the data.    Bernoulli distribution  A probability distribution describing a random variable that can take on two possible outcomes (e.g., win / loss).    parameter  A numerical value that describes a population.    complementary  A description of two events who are mutually exclusive and whose probabilities sum to one (i.e., either one event or the other is guaranteed to happen, but not both).    binomial random variable  A variable whose values occur according to a binomial probability distribution.    probability mass distribution  A function giving the probability that a discrete random variable is equal to a given value.    Poisson distribution  A probability distribution for count data that has support on the non-negative integers. This distribution is also used to approximate a binomial distribution when the probability of success is small and the number of trials is large.    epitope / antigen determinent  Site on a macromolecular antigen to which an antibody binds. This is the part of an antigen that is recognized by the immune system.    Enzyme-linked immunosorbent assay (ELISA)  An assay that is used to detect specific epitopes at different positions along a protein.    conditional on  Given    cumulative distribution function  A function giving the probability that a random variable is less than any specified value.    extreme value analysis  Analysis focused on the behavior of the very large or the very small outcomes of a random distribution, allowing an exploration of the probability of rare events.    rare event  Something that occurs with a very low probability.    rank statistic  A data vector sorted least to greatest.    Monte Carlo method  A method that uses computer simulation from a generative model to determine probabilities of events.    probability or generative modeling  A method of modeling where all the parameters are known and the mathematical theory allows us to work by deduction.    deduction  A top-down method of reasoning, starting from a theory or principle rather than from data.    statistical modeling  A method of modeling where the distribution of the data is not known.    fit  In the context of statistical modeling, estimating the parameters of a model based on observed data.    multinomial  A generalization of the binomial distribution to cases where there are a finite set of possible outcomes (e.g., a roll of a die).    power / true positive rate  The probability of detecting something if it is there.    null hypothesis  Often, a hypothesis of “no association” that is used as a counterpart to a more interesting alternative hypothesis in hypothesis testing.    matrix  In programming, a two-dimensional array of data, all with the same data type.    expected value  The average (mean) value of a random variable.    variability / spread / dispersion  In statistics, the amount by which a set of observations deviate from their mean.    statistic  A numerical characteristic of a sample and known constants (i.e. no unknown parameters).    null distribution  The probability distribution under the null hypothesis.    alternative  In the context of a generating process and hypothesis testing, the generating process that is considered in comparison to the generating process under the null hypothesis.    chi-squared distribution  A distribution on the non-negative real numbers that is often used in assessing goodness-of-fit (e.g. models fit to contingency tables).    p-value  The probability of seeing the observed data or something more extreme under the generative model associated with the null hypothesis.    probability density function  A function giving the relative likelihood that a continuous random variable is equal to a given value. When this function is integrated over the sample space, it equals 1.    default  In the context of arguments to an R function, the value that is used if no custom value is specified.    C. elegans genome nucleotide frequency  How often adenine, cytosine, guanine, and thymine occur in the DNA of a roundwork often used in scientific research.    Bioconductor  Open-source software that provides contributed programs for bioinformatic data analysis.    codon  A three-nucleotide sequence that specifies the amino acid to be created next (or to start or stop synthesis).    DNA read  An inferred sequence of base pairs for a single DNA fragment, based on sequencing.    nucleotide  In the context of DNA, one of four compounds (adenine (A); cytosince (C); guanine (G); and tymine (T)) that make up the basic information unit.    genome  An organism’s complete set of DNA, including all of its genes.    replication cycle  In biology, the process that begins with the infection of a host cell by a virus and ends with the release of mature progeny virus particles.    point mutation  A change, addition, or deletion of a single nucleotide in a gene sequence.    genotype  The genetic make-up of an individual’s cells, including how the individual’s genetic make-up differs from others’.    diploid  Having genetic material in two complete sets of chromosomes, from two parents.    protein  A compound made up of amino acids; one of the four types of macromolecules that make up living organisms.    antibody  A type of protein made by certain white blood cells in response to an antigen.    antigen  A foreign substance in the body to which the immune system reacts.     Sources consulted or cited Some of the definitions above are based in part or whole on listed definitions in the following sources.\n Holmes and Huber, 2019. Modern Statistics for Modern Biology. Cambridge University Press, Cambridge, United Kingdom. Everitt and Skrondal, 2010. The Cambridge Dictionary of Statistics (Fourth Edition). Cambridge University Press, Cambridge, United Kingdom. Bioconductor: Open Source Software for Bioinformatics. https://www.bioconductor.org/ Wikipedia: The Free Encyclopedia. https://en.wikipedia.org/wiki/Main_Page NIH Genetics Home Reference. https://ghr.nlm.nih.gov/ NCI Dictionary of Cancer Terms. https://www.cancer.gov/publications/dictionaries/cancer-terms   Practice   ","date":1578873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578957646,"objectID":"689ae0d83c0f37774ff128d4fd9d9d42","permalink":"/post/vocabulary-for-chapter-1/","publishdate":"2020-01-13T00:00:00Z","relpermalink":"/post/vocabulary-for-chapter-1/","section":"post","summary":"Chapter 1 covers generative modeling for discrete data. It introduces a number of terms covering probablity and statistical modeling, as well as a few biological terms. The vocabulary words for Chapter 1 are:\n        probability model  A mathematical description of the possible outcomes of an experiment and the probability of each of those outcomes.    vector  In programming, a one-dimensional array of data, all with the same data type.","tags":["vocabulary","Chapter 1"],"title":"Vocabulary for Chapter 1","type":"post"}]