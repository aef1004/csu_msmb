institution: Colorado State University
year: 2019
email: scooper2@rams.colostate.edu
interests:
- M. tuberculosis immunology
- Histopathogy image analysis
- Interest 3
name: Sarah Cooper
organizations:
- name: Colorado State University
url: ""
role: Graduate Student in MIP
social:
- icon: envelope
icon_pack: fas
link: mailto:...@colostate.edu
#- icon: twitter
#  icon_pack: fab
#  link: https://twitter.com/...
#- icon: google-scholar
#  icon_pack: ai
#  link: https://scholar.google.com/citations?user=...
#- icon: github
#  icon_pack: fab
#  link: https://github.com/...
superuser: true
user_groups:
- Students
---
serve_site()
serve_site()
serve_site()
serve_site()
library(blogdown)
serve_site()
---
authors:
bio: Sarah Cooper is a PhD graduate student at Colorado State University. She is researching the immunopathology of M. tuberculosis in animal models.
education:
courses:
- course: BSc in Microbiology and Biomedical Sciences
institution: Colorado State University
year: 2019
email: scooper2@rams.colostate.edu
interests:
- M. tuberculosis immunology
- Histopathogy image analysis
- Learning to code
name: Sarah Cooper
organizations:
- name: Colorado State University
url: ""
role: Graduate Student in MIP
social:
- icon: envelope
icon_pack: fas
link: mailto:...@colostate.edu
#- icon: twitter
#  icon_pack: fab
#  link: https://twitter.com/...
#- icon: google-scholar
#  icon_pack: ai
#  link: https://scholar.google.com/citations?user=...
#- icon: github
#  icon_pack: fab
#  link: https://github.com/...
superuser: true
user_groups:
- Students
---
serve_site()
serve_site()
serve_site()
library(blogdown)
library(blogdown)
serve_site()
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
library(blogdown)
serve_site()
View(serve_site)
View(serve_site)
View(serve_site)
install.packages(c("boot", "foreign", "jsonlite", "MASS", "mime", "nlme", "rlang", "yaml"))
install.packages(c("boot", "foreign", "jsonlite", "MASS", "mime", "nlme", "rlang", "yaml"))
install.packages(c("boot", "foreign", "jsonlite", "MASS", "mime", "nlme", "rlang", "yaml"))
install.packages("yaml")
install.packages("yaml")
BiocManager::install("Biostrings")
```{r}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(Biostrings)
library(BSgenome.Celegans.UCSC.ce2)
BiocManager::install("BSgenome.Celegans.UCSC.ce2")
library(Biostrings)
library(Biostrings)
library(BSgenome.Celegans.UCSC.ce2)
genome_length <- length(Celegans$chrM)
genome_length
probs <- letterFrequency(Celegans$chrM, letters = c("A","C","G","T"))/genome_length
probs
e99 = e100[-which.max(e100)]
load("../data/e100.RData")
e99 = e100[-which.max(e100)]
mtb = read.table("../data/M_tuberculosis.txt", header = TRUE)
head(mtb, n = 4)
mtb = read.table("../data/M_tuberculosis.txt", header = TRUE)
mtb = read.table("../data/M_tuberculosis.txt", header = TRUE)
head(mtb, n = 4)
pro  =  mtb[ mtb$AmAcid == "Pro", "Number"]
pro/sum(pro)
table(mtb)
tabulate(Amacid)
(Codon)
tabulate(mtb)
mtb
round(prop10, digits = 2)
letterFrq = vapply(mtb, letterFrequency, FUN.VALUE = numeric(4),
letters = "ACGT", OR = 0)
colnames(letterFrq) = paste0("gene", seq(along = mtb))
tab10 = letterFrq[, 1:10]
computeProportions = function(x) { x/sum(x) }
prop10 = apply(tab10, 2, computeProportions)
round(prop10, digits = 2)
letterFrequency(mtb[[1]], letters = "ACGT", OR = 0)
mtb[1]
letterFrequency(mtb[[1]], letters = "ACGT", OR = 0)
mtb[1]
letterFrequency(mtb[[1]], letters = "ACGT", OR = 0)
View(mtb)
View(mtb)
---
title: "Chapter 1"
output: html_document
---
Exercise 1.8
```{r}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
genome_length <- length(Celegans$chrM)
probs <- letterFrequency(Celegans$chrM, letters = c("A","C","G","T"))/genome_length
You can kind of make up statistical equations to simulate - for example, could just do summation of absoluate value of expected - observed.
```{r}
library(BSgenome.Celegans.UCSC.ce2)
library(Biostrings)
genome_length <- length(Celegans$chrM)
# probabilities
probs <- letterFrequency(Celegans$chrM, letters = c("A", "C", "G", "T"))/length(Celegans$chrM)
set.seed(2)
pvec <- rep(1/4, 4)
obs <- rmultinom(1000, prob = pvec, size = genome_length)
expected0 <- pvec*genome_length
stat = function(obsvd, exptd = genome_length * pvec) {
sum((obsvd - exptd)^2 / exptd)
}
stat(obs[, 1])
S0 = apply(obs, 2, stat)
summary(S0)
hist(S0, breaks = 25, col = "lavender", main = "")
# this gives us the test statistic
q95 = quantile(S0, probs = 0.95)
q95
# if we set an alpha of 0.05, then 95% of the data should be
# Because our stat = 4392 (below) is much greater than our quantile of 8.045, then we reject the null (the probability is not uniform)
# to get the 95% quantile where 3 is 1 fewer the number of bins you have
qchisq(0.95, 3)
table(mtb)
tabulate(mtb)
mtb[1]
letterFrequency(mtb[[1]], letters = "ACGT", OR = 0)
letterFrq = vapply(mtb, letterFrequency, FUN.VALUE = numeric(4),
letters = "ACGT", OR = 0)
colnames(letterFrq) = paste0("gene", seq(along = mtb))
tab10 = letterFrq[, 1:10]
computeProportions = function(x) { x/sum(x) }
prop10 = apply(tab10, 2, computeProportions)
round(prop10, digits = 2)
group_by(codon)%>%
mtb%>%
mutate(genome_length) = sum(Number) %>%
group_by(Codon) %>%
mutate(PerThous = 100*Number / genome_length)
install.packages("dplyr")
library(dplyr)
mtb%>%
mutate(genome_length) = sum(Number) %>%
group_by(Codon) %>%
mutate(PerThous = 100*Number / genome_length)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(dplyr)
mtb%>%
mutate(genome_length) = sum(Number) %>%
group_by(Codon) %>%
mutate(PerThous = 100*Number / genome_length)
mtb%>%
mutate(genome_length) = sum(Number) %>%
group_by(Codon) %>%
mutate(PerThous = 1000*Number / genome_length)
mtb%>%
mutate(genome_length) = sum(Number) %>%
group_by(Codon) %>%
mutate(PerThous = 1000*Number / genome_length)
mtb
mutate(genome_length = sum(Number) %>%
mtb%>%
mutate(genome_length = sum(Number) %>%
group_by(Codon) %>%
mutate(PerThous = 1000*Number / genome_length)
mtb%>%
mutate(genome_length = sum(Number)) %>%
group_by(Codon) %>%
mutate(PerThous = 1000*Number / genome_length)
mtb
mtb%>%
mutate(genome_length = sum(Number))
mtb%>%
mutate(genome_length = sum(Number)) %>%
group_by(Codon)
mtb%>%
mutate(genome_length = sum(Number)) %>%
group_by(Codon) %>%
mutate(PerThous = 1000*Number / genome_length)
colnames(codonFrq) = paste0("AmAcid", seq(along = mtb))
tab10 = codonFrq[, 1:10]
computeProportions = function(x) { x/sum(x) }
prop10 = apply(tab10, 2, computeProportions)
round(prop10, digits = 2)
round(prop10, digits = 2)
PerThous = vapply(mtb, CodonFrequency, FUN.VALUE = numeric(4),
codon = "ACGT", OR = 0)
colnames(codonFrq) = paste0("AmAcid", seq(along = mtb))
tab10 = codonFrq[, 1:10]
computeProportions = function(x) { x/sum(x) }
prop10 = apply(tab(mtb), 2, computeProportions)
round(prop10, digits = 2)
colnames(codonFrq) = paste0("AmAcid", seq(along = mtb))
Ala = codonFrq[, 13:16]
colnames(PerThous) = paste0("Ala", seq(along = mtb))
View(obs)
stat = function(obsvd, exptd = 20 * pvec) {
sum((obsvd - exptd)^2 / exptd)
}
B = 1000
simulstat = replicate(B, {
randomtab10 = sapply(cs, function(s) { rmultinom(1, s, p0) })
stat(randomtab10, expectedtab10)
})
S1 = stat(tab10, expectedtab10)
sum(simulstat >= S1)
rtheta = rbeta(100000, 50, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 90, 610)
lines(thetas, densPostTheory, type="l", lwd = 3)
rtheta = rbeta(100000, 50, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 90, 610)
lines(thetas, densPostTheory, type="l", lwd = 3)
#exercise 2.6
rtheta = rbeta(100000, 50, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 90, 610)
lines(thetas, densPostTheory, type="l", lwd = 3)
mean(thetaPostEmp)
## [1] 0.1286394
dtheta = thetas[2]-thetas[1]
sum(thetas * densPostTheory * dtheta)
## [1] 0.1285714
library(Biostrings)
library(BSgenome)
library(BSgenome.Celegans.UCSC.ce2)
rtheta = rbeta(100000, 50, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
rbinom(length(rtheta), rtheta, size = 300)
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 90, 610)
lines(thetas, densPostTheory, type="l", lwd = 3)
mean(thetaPostEmp)
## [1] 0.1286394
dtheta = thetas[2]-thetas[1]
sum(thetas * densPostTheory * dtheta)
## [1] 0.1285714
thetas = seq(0, 1, by = 0.001)
plot(thetas, loglikelihood(thetas), xlab = expression(theta),
ylab = expression(paste("log f(", theta, " | y)")),type = "l")
rtheta = rbeta(100000, 50, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetas = seq(0, 1, by = 0.001)
plot(thetas, loglikelihood(thetas), xlab = expression(theta),
ylab = expression(paste("log f(", theta, " | y)")),type = "l")
loglikelihood = function(theta, n = 300, k = 40) {
115 + k * log(theta) + (n - k) * log(1 - theta)
}
loglikelihood = function(theta, n = 300, k = 40) {
115 + k * log(theta) + (n - k) * log(1 - theta)
}
loglikelihood = function(theta, n = 300, k = 40) {
115 + k * log(theta) + (n - k) * log(1 - theta)
}
thetas = seq(0, 1, by = 0.001)
plot(thetas, loglikelihood(thetas), xlab = expression(theta),
ylab = expression(paste("log f(", theta, " | y)")),type = "l")
loglikelihood = function(theta, n = 300, k = 40) {
115 + k * log(theta) + (n - k) * log(1 - theta)
}
thetas = seq(0, 1, by = 0.001)
plot(thetas, loglikelihood(thetas), xlab = expression(theta),
ylab = expression(paste("log f(", theta, " | y)")),type = "l")
rtheta = rbeta(100000, 50, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
rbinom(length(rtheta), rtheta, size = 300)
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 90, 610)
lines(thetas, densPostTheory, type="l", lwd = 3)
mean(thetaPostEmp)
## [1] 0.1286394
dtheta = thetas[2]-thetas[1]
sum(thetas * densPostTheory * dtheta)
## [1] 0.1285714
thetaPostMC = rbeta(n = 1e6, 90, 610)
mean(thetaPostMC)
## [1] 0.1285445
qqplot(thetaPostMC, thetaPostEmp, type = "l", asp = 1)
abline(a = 0, b = 1, col = "blue")
qqplot(thetaPostMC, thetaPostEmp, type = "l", asp = 1)
abline(a = 0, b = 1, col = "blue")
densPost2 = dbeta(thetas, 115, 735)
mcPost2   = rbeta(1e6, 115, 735)
sum(thetas * densPost2 * dtheta)  # mean, by numeric integration
## [1] 0.1352941
mean(mcPost2)                     # mean, by MC
## [1] 0.1352963
thetas[which.max(densPost2)]      # MAP estimate
## [1] 0.134
quantile(mcPost2, c(0.025, 0.975))
## 0.1131867 0.1590393
## 0.1131867 0.1590393
rtheta = rbeta(100000, 50, 350)
hist(rtheta)
rtheta = rbeta(100000, 50, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 90, 610)
lines(thetas, densPostTheory, type="l", lwd = 3)
thetaPostEmp = rtheta[ y == 30 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 80, 620)
lines(thetas, densPostTheory, type="l", lwd = 3)
mean(the)
mean(thetaPostEmp)
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 60, 9)
lines(thetas, densPostTheory, type="l", lwd = 3)
mean(thetaPostEmp)
rtheta = rbeta(100000, 20, 9)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 60, 9)
lines(thetas, densPostTheory, type="l", lwd = 3)
mean(thetaPostEmp)
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 60, 9)
lines(thetas, densPostTheory, type="l", lwd = 3)
mean(thetaPostEmp)
rtheta = rbeta(100000, 20, 9)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 60, 269)
lines(thetas, densPostTheory, type="l", lwd = 3)
mean(thetaPostEmp)
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 60, 269)
lines(thetas, densPostTheory, type="l", lwd = 3)
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 60, 269)
lines(thetas, densPostTheory, type="l", lwd = 3)
rtheta = rbeta(100000, 20, 9)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 60, 269)
lines(thetas, densPostTheory, type="l", lwd = 3)
rtheta = rbeta(100000, 50, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
rtheta = rbeta(100000, 20, 9)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 60, 269)
lines(thetas, densPostTheory, type="l", lwd = 3)
rtheta = rbeta(100000, 150, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, 190, 610)
lines(thetas, densPostTheory, type="l", lwd = 3)
rtheta = rbeta(100000, 150, 350)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
mean(thetaPostEmp)
mean(rtheta)
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, x = 190, 610)
lines(thetas, densPostTheory, type="l", lwd = 3)
rtheta = rbeta(100000, 10, 30)
y = vapply(rtheta, function(th) {
rbinom(1, prob = th, size = 300)
}, numeric(1))
hist(y, breaks = 50, col = "orange", main = "", xlab = "")
mean(rtheta)
thetaPostEmp = rtheta[ y == 40 ]
hist(thetaPostEmp, breaks = 40, col = "chartreuse4", main = "",
probability = TRUE, xlab = expression("posterior"~theta))
densPostTheory  =  dbeta(thetas, x = 50, 290)
lines(thetas, densPostTheory, type="l", lwd = 3)
mean(thetaPostEmp)
pull
git(pull)
"git pull"
"git pull"
git pull
source('~/Desktop/MSMB/csu_msmb/Untitled2.R')
"git pull"
library(blogdown)
install.packages("blogdown")
install.packages("shiny")
install.packages("fastmap")
install.packages("shiny")
git pull upstream master
"git pull"
savehistory("~/Desktop/MSMB/csu_msmb/rstudio history.Rhistory")
